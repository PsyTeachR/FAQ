[["index.html", "Frequently Asked Questions (FAQ) from University of Glasgow Psychology Students Overview", " Frequently Asked Questions (FAQ) from University of Glasgow Psychology Students Team #PsyTeachR 2021-08-18 Overview This book contains answers to many Frequently Asked Questions received by the School of Psychology/Institute of Neuroscience and Psychology team at the University of Glasgow. Contents are made available under a CC-BY-SA license. To cite: Woods, H., Stack, N., Paterson, H., Nordmann, E., McAleer, P., Kueper-Tetzel, C., DeBruine, L., Barr, D. J., and the #psyteachr team (2020). Frequently Asked Questions (FAQ) from University of Glasgow Psychology Students (version 2021-08-18). Retrieved from https://psyteachr.github.io/FAQ. If you have suggestions for new entries or comments on existing entries, please file an issue at https://github.com/PsyTeachR/FAQ/issues. "],["installingupdating-r-and-rstudio.html", "Topic 1 Installing/Updating R and RStudio 1.1 What is R and RStudio, and how do I get them? 1.2 How do I update R, RStudio, and add-on packages to the latest versions? 1.3 How do I access files when using the RStudio Server?", " Topic 1 Installing/Updating R and RStudio 1.1 What is R and RStudio, and how do I get them? R is free, open-source software environment for statistical programming and graphics. It is the engine that you will use to do your analyses. RStudio is an ‚ÄúIntegrated Development Environment‚Äù (IDE)‚Äîa software package developed by the commercial software company RStudio. RStudio is not necessary to use R, but it is highly recommended because it makes it much easier to interact with the R engine and develop reproducible scripts compared to working with R alone. RStudio desktop is a free version of this software. There are other IDEs available that work with R, such as Jupyter notebooks and emacs (with ESS and org-mode). But the software we recommend is RStudio. We often refer to the combination of these two pieces of software as R/RStudio. You have the following options for getting access to R/RStudio: Install it locally. Both pieces of software are free. The advantage is that you can use them without an internet connection, and you have easy access to the files stored on your hard drive. This is the best long-term solution but installation can sometimes be a hassle (particularly for Mac users). Use the department‚Äôs RStudio Server. This is a great option as it doesn‚Äôt require installing anything on your own system‚Äîall you need to do is open a web browser and point it to the right address. It has R, RStudio, and all the add-on packages you might need preinstalled. The disadvantage is that it is requires a stable internet connection, and access to local files can be somewhat tricky. It is great for people new to R/RStudio. If you are a Psychology student at the University of Glasgow, you have free access to this server. Please contact your instructor for the link. Access R/RStudio through Windows Virtual Desktop. Works ok but performance can be sluggish, especially with low-bandwidth network connections. Not recommended unless options 1 and 2 are not viable. Use RStudio Cloud. This is a free cloud service that works well as a temporary option, but without the paid version your options will be limited. Not recommended except as a final fallback option. 1.1.1 Installing R and RStudio This is your best long-term option and is really not too difficult, but if you‚Äôre new to R/RStudio or not confident with computers, we don‚Äôt recommend this. As far as we are aware at time of writing, R and RStudio do not work well on Chromebooks, Android Tablets or iPads. If this is the only device that you have access to you can try the RStudio Server. We really recommend a laptop or desktop computer as the ideal machine for your data analysis work. Michael Galarnyk has very good tutorials for installing R and RStudio on a Mac and a PC. The basic thing to remember is install R first and only then install RStudio. For installing on a Mac For installing on a PC 1.1.2 Using the Department‚Äôs RStudio Server The RStudio Server is accessed through a browser, and operates nearly identically to R/RStudio running locally despite the fact that it is actually running remotely. However, there are two differences: (1) it can sometimes be slow, depending on the speed of your network connection as well as the load on the server; and (2) you cannot directly access any local files on your hard drive; you must upload them to the server to work with them. Open a browser and enter the URL of the University of Glasgow Psychology RStudio Server. You will need to get the URL from your class Moodle web page or from your instructor. When you enter the URL you will see: Image of the RStudio login At the login screen, enter your GUID and password. The result will be an interactive web page that looks just like what you would see if you had installed R/RStudio locally, except it is running on a departmental server. If you have login problems, please connect to the university‚Äôs Virtual Private Network (VPN) and try again. If you continue to have problems, please post your problem to a help channel on Teams. Also, please read the section on working with files on the server. 1.1.3 Using Virtual Desktop Virtual Desktop is another browser-based method for getting access to R/RStudio. It will be more laggy than the RStudio Server and also has the same limitation of not being able to see local files, so we don‚Äôt recommend it except as a fallback option for R/RStudio if you can‚Äôt access the server for some reason. But if you need to use other software it may be your only option. When you connect to the Psychology Remote Desktop, it will look like you are working on another computer from your own computer. You will interact with it just like you are working on a standard Windows Desktop, except that it will appear as a web page within your browser. From there, you can access any software that the department has access to and run it ‚Äúin the cloud.‚Äù Open your browser and go to https://rdweb.wvd.microsoft.com/arm/webclient/. You might need to go through several sign-in screens until you get to this: image of remote desktop options Click on ‚ÄúPsy Desktop‚Äù and then you might be asked to log in again on the screen below. Use your GUID and password. image of yet another login screen Then you will see what looks like a standard Windows log on screen, and eventually, the desktop. Software can be accessed from the pop-up menu available by clicking on the Windows icon in the bottom left corner of the browser window. Launch the software you need. For instance, If you want to use RStudio, click on windows icon in the bottom left corner of the browser window and type rstudio in the search bar that appears. Then you can click on the app to launch it. October 1, 2020. -HP and DB 1.2 How do I update R, RStudio, and add-on packages to the latest versions? We recommend that you update all your data skills software and packages at the start of the academic year. That will mean that you are running the same software as members of staff and fellow students and helps collaborative work. Never do this just before an assignment is due, save updating for when you have a bit of time on your hands. IMPORTANT update R first, then update R Studio and then update your packages Nick Hathaway has a set of instructions that work for this. The process takes about 20 minutes To update R itself, you will need to use R rather than RStudio. The newest version of RStudio has a lovely tool that scans scripts you open for any packages that you don‚Äôt have installed so look out for that. October 1, 2020. -HP and DB 1.3 How do I access files when using the RStudio Server? The first thing to note is that the RStudio Server is not a good place to store your data forever. it is not backed up, so make sure that you download any important work regularly and store on OneDrive. The undergraduate Level 1 teaching materials has walk-through information about interacting with the server as well as uploading files. Here is a quick reference guide. 1.3.1 Loading data into the RStudio Server Select the Files Tab Make a folder for your work (NEVER call it R as that can cause errors) Click Upload Browse to the file on your computer via Choose File ‚Äì if you upload a zipped folder, the server will automatically unzip it for you üòä Image of the uploading instructions 1.3.2 Downloading files from the RStudio Server If you just have a single file to download, it‚Äôs as easy as just clicking on that file in the Files pane of the RStudio Server. If you have multiple files that you want to download: Select the Files Tab Select the folder of file by ticking the box next to it Click More Click ‚ÄúExport‚Äù Rename if you need and click download ‚Äì it will download to your default downloads space (usually on PCs a folder called downloads). If you select a whole folder, it will download as a zipped folder and you will need to unzip it. Image of the downloading instructions October 1, 2020. -HP and DB "],["troubleshooting-r-and-rstudio.html", "Topic 2 Troubleshooting R and RStudio 2.1 Every time I knit, I get a message that packages are missing, and it won‚Äôt knit. 2.2 Why can‚Äôt I compile packages from source? 2.3 When I try to compile, I get the following error message: 2.4 I am unable to install add-on packages from source. 2.5 RStudio keeps crashing with MacOS 10.15 Catalina 2.6 When I start RStudio, I get the error ‚ÄúFatal error: unable to initialize the JIT‚Äù", " Topic 2 Troubleshooting R and RStudio 2.1 Every time I knit, I get a message that packages are missing, and it won‚Äôt knit. Probably what‚Äôs happening is that it tries but fails to install the necessary packages. Mark down the names of the packages that it says you need and try to install them from the command line. For example, if it says you need digest then type this into the console: install.packages(&quot;digest&quot;) and see what happens. Note any error messages. Check the section on packages for help with specific error messages. October 24, 2019. -DB 2.2 Why can‚Äôt I compile packages from source? If you are a Windows user, you are missing RTools. See this FAQ If you are a Mac user, there might be something wrong with your installation. October 24, 2019. -DB 2.3 When I try to compile, I get the following error message: xcrun: error: invalid active developer path Solution: Open up the Terminal App. (Application&gt;Utilities or you can use the Terminal tab in RStudio, next to the console). At the command line in the Terminal type the following line. xcode-select --install October 24, 2019. -DB 2.4 I am unable to install add-on packages from source. If you are not able to install packages from source, you are missing the build tools that are used to compile source code into files that the operating system can execute. If you are a Windows user Go to https://cran.r-project.org/bin/windows/Rtools. Download and install the ‚Äúrecommended‚Äù version. 2.5 RStudio keeps crashing with MacOS 10.15 Catalina When you first open RStudio, you might get a warning that says: The ‚Äúgit‚Äù command requires the command line developer tools. Would you like to install the tools now? Click Install just in case Apple sorts out their problem so you get the most up to date version. But you‚Äôre likely to get this error message: Can‚Äôt install the software because it is not currently available from the Software Update server. Go to Apple Developer. You might need to sign in with your Apple ID. Choose Command Line Tools for Xcode 12 (not the beta) at https://developer.apple.com/download/more/. You don‚Äôt need to install Xcode 12. Download the DMG, open it, and follow the instructions to install it. You will need your computer password. More Downloads for Apple Developers - install Command Line Tools for Xcode 12 After you install the command line tools, you can delete the disk image (.dmg file). Quit RStudio if it is open and reopen it. You might be asked to install new packages, such as xfun. Just click Yes to install them. If you are not asked to install packages when you open RStudio, or after you do install them, try to open a new R Markdown file. This will probably prompt more installations. Install Required Packages There will be a lot of red output in the RStudio console, but this is normal. Installing Packages After this, try to make a new R Markdown file and knit the demo file to html. You should be all set now. Thanks to Ashley McCluskey for figuring out where to get the command tools! October 1, 2020. -LDB 2.6 When I start RStudio, I get the error ‚ÄúFatal error: unable to initialize the JIT‚Äù This error crops up sometimes when using R on campus computers. This is due to a bug in your campus profile. Please speak to the IT Helpdesk. November 6, 2019. -DB "],["r-tips-and-tricks.html", "Topic 3 R Tips and Tricks 3.1 Show R code in Word 3.2 Save plots as images 3.3 Import data from multiple files 3.4 Detect ‚Äúruns‚Äù in a sequence 3.5 Highlight a range of x-values on a plot", " Topic 3 R Tips and Tricks 3.1 Show R code in Word How do I get nicely formatted R code into a Word document? You might want to include your R code as an appendix in a document. If you just cut and paste it in, the formatting will look terrible. So here is a trick that allows you to get nicely formatted R code into Word. First step: open a new R Markdown file which you will paste the code into. For the output format, select Word. Second step: paste the code into a block with chunk options eval=FALSE, echo=TRUE. ```{r verb, eval = FALSE, echo=TRUE} ## this is my code library(&quot;tidyverse&quot;) dat &lt;- read_csv(&quot;blah.csv&quot;) %&gt;% group_by(subj_id) %&gt;% summarise(m = mean(RT)) ``` Third step: compile to Word. You can now copy and paste the formatted code into your document. March 23, 2020. -DB 3.2 Save plots as images Copying and pasting image from R to Word usually results in images that have very poor resolution and aren‚Äôt an ideal aspect ratio. You should always save plots as images if you are going to use them in another file. If you are using {ggplot2} to make plots, or {cowplot} to make multi-panel figures, you can save the plot using ggsave(). First, make the plot. ggplot(diamonds, aes(x = carat, y = price, colour = cut)) + facet_wrap(~color, ncol = 4, labeller = label_both) + geom_point(alpha = 0.5) + geom_smooth(method = lm, formula = y~x + I(x^2)) + guides(color = guide_legend(reverse = TRUE)) + theme_minimal(base_size = 14) + theme(legend.position = c(.88, .25)) Figure 3.1: Original Plot By default, ggsave() will save the last plot you made. If you saved the plot to an object, you can also set the plot argument to that. Set the filename with .png or .pdf at the end to get the best-quality images. Set the width and height in inches. You might need some trial and error before you‚Äôre happy with the outcome. You can change the image size and/or the base_size in the theme to make the fonts larger or smaller. The image resolution (dpi) defaults to 300, and this works well for most purposes, but you can set it to another value if a journal requires figures to be in a specific DPI. ggsave(filename = &quot;images/diamonds.png&quot;, width = 10, height = 5) If you want to use the image in an R Markdown file, you can use the code below. knitr::include_graphics(&quot;images/diamonds.png&quot;) Figure 3.2: Saved Image March 6, 2021. -LDB 3.3 Import data from multiple files The following code allows you to read in a whole bunch of files from a directory datadir all at once into a big table. If the files are in the same directory as your script, replace datadir with a full stop, i.e., dir(\".\", \"\\\\.[Cc][Ss][Vv]$\"). library(&quot;tidyverse&quot;) # &quot;\\\\.csv$&quot; = find all files ending with csv or CSV todo &lt;- tibble(filename = dir(&quot;datadir&quot;, &quot;\\\\.[Cc][Ss][Vv]$&quot;)) all_data &lt;- todo %&gt;% mutate(imported = map(filename, read_csv)) %&gt;% unnest(imported) If there is preprocessing you need to do on each file before reading it in, you can write your own function and call that in place of read_csv(). October 30, 2019. -DB 3.4 Detect ‚Äúruns‚Äù in a sequence Let‚Äôs say you have a table like below, and you want to find the start and end frames where you have a run of Z amidst a, b, c, d.¬†Here is code that sets up this kind of situation. Don‚Äôt worry if you don‚Äôt understand this code; just run it to create the example data in runsdata, and have a look at that table. library(&quot;knitr&quot;) create_run_vec &lt;- function() { ## create a random string of letters with two runs c(rep(sample(letters[1:4]), sample(2:4, 4, TRUE)), rep(&quot;Z&quot;, 3), rep(sample(letters[1:4]), sample(2:4, 4, TRUE)), rep(&quot;Z&quot;, 3), rep(sample(letters[1:4], 2), sample(2:4, 2, TRUE))) } ## 5 subjects, 3 trials each runsdata &lt;- tibble( subject = rep(1:5, each = 3), trial = rep(1:3, 5), stimulus = rerun(15, create_run_vec())) %&gt;% unnest(stimulus) %&gt;% group_by(subject, trial) %&gt;% ungroup() %&gt;% select(subject, trial, stimulus) Let‚Äôs say you want to find the start and stop frames where Z appears in stimulus, and do this independently for each combination of subject and trial. Here‚Äôs how stimulus looks for subject 1 and trial 1. ## [1] &quot;d&quot; &quot;d&quot; &quot;a&quot; &quot;a&quot; &quot;a&quot; &quot;a&quot; &quot;c&quot; &quot;c&quot; &quot;b&quot; &quot;b&quot; &quot;b&quot; &quot;b&quot; &quot;Z&quot; &quot;Z&quot; &quot;Z&quot; &quot;d&quot; &quot;d&quot; &quot;c&quot; &quot;c&quot; ## [20] &quot;b&quot; &quot;b&quot; &quot;b&quot; &quot;a&quot; &quot;a&quot; &quot;a&quot; &quot;a&quot; &quot;Z&quot; &quot;Z&quot; &quot;Z&quot; &quot;c&quot; &quot;c&quot; &quot;c&quot; &quot;b&quot; &quot;b&quot; So here you can see that the first run of Zs is from frame 13 to 15, 29 and the second is from 27 to 29. We want to write a function that processes the data for each trial and results in a table like this: ## # A tibble: 2 x 5 ## subject trial run start_frame end_frame ## &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1 1 1 13 15 ## 2 1 1 2 27 29 The first thing to do is to add a logical vector to your tibble whose value is TRUE when the target value (e.g., Z) is present in the sequence, false otherwise. runsdata_tgt &lt;- runsdata %&gt;% mutate(is_target = (stimulus == &quot;Z&quot;)) runsdata_tgt ## # A tibble: 525 x 4 ## subject trial stimulus is_target ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;lgl&gt; ## 1 1 1 d FALSE ## 2 1 1 d FALSE ## 3 1 1 a FALSE ## 4 1 1 a FALSE ## 5 1 1 a FALSE ## 6 1 1 a FALSE ## 7 1 1 c FALSE ## 8 1 1 c FALSE ## 9 1 1 b FALSE ## 10 1 1 b FALSE ## # ‚Ä¶ with 515 more rows We want to iterate over subjects and trials. We‚Äôll start by creating a tibble with columns is_target nested into a column called subtbl. runs_nest &lt;- runsdata_tgt %&gt;% select(-stimulus) %&gt;% # don&#39;t need it anymore nest(subtbl = c(is_target)) We want to iterate over the little subtables stored within subtbl in each row of the table, passing the table to a function that will find the runs and return another table, which we‚Äôll store in new column. Let‚Äôs write a function to detect the runs. That function will need the function rle() (Run-Length Encoding) from base R. We‚Äôll run that on the logical vector we created (is_target). Before creating the function, let‚Äôs see what rle() does on the values in is_target for subject 1, trial 1. s1t1 &lt;- runsdata_tgt %&gt;% filter(subject == 1L, trial == 1L) %&gt;% pull(is_target) s1t1 rle(s1t1) ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [13] TRUE TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [25] FALSE FALSE TRUE TRUE TRUE FALSE FALSE FALSE FALSE FALSE ## Run Length Encoding ## lengths: int [1:5] 12 3 11 3 5 ## values : logi [1:5] FALSE TRUE FALSE TRUE FALSE If that doesn‚Äôt make sense, look at the help for rle() (type ?rle in the console). Now we‚Äôre ready to write our function, detect_runs(). detect_runs &lt;- function(x) { if (!is.logical(x[[1]])) stop(&quot;&#39;x&#39; must be a tibble whose first column is of type &#39;logical&#39;&quot;) runs &lt;- rle(x[[1]]) run_start_fr &lt;- c(1L, cumsum(runs$lengths[-length(runs$lengths)]) + 1L) run_end_fr &lt;- run_start_fr + (runs$lengths - 1L) tgt_start &lt;- run_start_fr[runs$values] tgt_end &lt;- run_end_fr[runs$value] tibble(run = seq_along(tgt_start), start_fr = tgt_start, end_fr = tgt_end) } We can test the function on s1t1 just to make sure it works. detect_runs(tibble(lvec = s1t1)) ## # A tibble: 2 x 3 ## run start_fr end_fr ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1 13 15 ## 2 2 27 29 OK, now we‚Äôre ready to run the function. result &lt;- runs_nest %&gt;% mutate(runstbl = map(subtbl, detect_runs)) result ## # A tibble: 15 x 4 ## subject trial subtbl runstbl ## &lt;int&gt; &lt;int&gt; &lt;list&gt; &lt;list&gt; ## 1 1 1 &lt;tibble [34 √ó 1]&gt; &lt;tibble [2 √ó 3]&gt; ## 2 1 2 &lt;tibble [35 √ó 1]&gt; &lt;tibble [2 √ó 3]&gt; ## 3 1 3 &lt;tibble [32 √ó 1]&gt; &lt;tibble [2 √ó 3]&gt; ## 4 2 1 &lt;tibble [34 √ó 1]&gt; &lt;tibble [2 √ó 3]&gt; ## 5 2 2 &lt;tibble [34 √ó 1]&gt; &lt;tibble [2 √ó 3]&gt; ## 6 2 3 &lt;tibble [37 √ó 1]&gt; &lt;tibble [2 √ó 3]&gt; ## 7 3 1 &lt;tibble [33 √ó 1]&gt; &lt;tibble [2 √ó 3]&gt; ## 8 3 2 &lt;tibble [36 √ó 1]&gt; &lt;tibble [2 √ó 3]&gt; ## 9 3 3 &lt;tibble [36 √ó 1]&gt; &lt;tibble [2 √ó 3]&gt; ## 10 4 1 &lt;tibble [37 √ó 1]&gt; &lt;tibble [2 √ó 3]&gt; ## 11 4 2 &lt;tibble [36 √ó 1]&gt; &lt;tibble [2 √ó 3]&gt; ## 12 4 3 &lt;tibble [37 √ó 1]&gt; &lt;tibble [2 √ó 3]&gt; ## 13 5 1 &lt;tibble [35 √ó 1]&gt; &lt;tibble [2 √ó 3]&gt; ## 14 5 2 &lt;tibble [34 √ó 1]&gt; &lt;tibble [2 √ó 3]&gt; ## 15 5 3 &lt;tibble [35 √ó 1]&gt; &lt;tibble [2 √ó 3]&gt; Now we just have to unnest and we‚Äôre done! result %&gt;% select(-subtbl) %&gt;% unnest(runstbl) ## # A tibble: 30 x 5 ## subject trial run start_fr end_fr ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1 1 1 13 15 ## 2 1 1 2 27 29 ## 3 1 2 1 13 15 ## 4 1 2 2 27 29 ## 5 1 3 1 11 13 ## 6 1 3 2 24 26 ## 7 2 1 1 12 14 ## 8 2 1 2 27 29 ## 9 2 2 1 13 15 ## 10 2 2 2 26 28 ## # ‚Ä¶ with 20 more rows October 30, 2019. -DB 3.5 Highlight a range of x-values on a plot Sometimes you want to highlight a particular range of values; for example, a particular period of time in a time series. The code below is used to create the following plot. Figure 3.3: A time series with x = 40-60 highlighted library(&quot;tidyverse&quot;) ## make up some example data exdata &lt;- tibble(x = rep(1:100, 2), series = rep(1:2, each = 100), y = rnorm(200) + rep(c(30, 50), each = 100)) ## region we want to highlight regions &lt;- tibble(x1 = 40, x2 = 60, y1 = -Inf, y2 = +Inf) ggplot(exdata, aes(x, y)) + geom_rect(data = regions, inherit.aes = FALSE, mapping = aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2), color = &quot;transparent&quot;, fill = &quot;blue&quot;, alpha = .2) + geom_line(aes(group = series)) March 23, 2020. -DB "],["wrangling-questionnaire-data.html", "Topic 4 Wrangling Questionnaire Data 4.1 How to I convert string values to numeric values? 4.2 How do I reverse score a subset of items on my questionnaire?", " Topic 4 Wrangling Questionnaire Data 4.1 How to I convert string values to numeric values? A very common situation is that you want to convert string values (‚ÄúAlmost Always‚Äù, ‚ÄúFrequently‚Äù) into numeric values (5, 4, etc) so that we can calculate a score. The solution I present here will use something called a ‚Äúlookup table‚Äù that matches string values to numbers. First, let‚Äôs assume the following (made-up) questionnaire asks four questions about hygiene. When you bathe, how often do you: Wash your legs? Wash behind your ears? Wash between your toes? Shampoo your hair? Let‚Äôs assume that answers are on a scale made up of the values ‚ÄúNever‚Äù, ‚ÄúSometimes‚Äù, ‚ÄúFrequently‚Äù, ‚ÄúAlways‚Äù, which we want to assign scores of 0, 1, 2, and 3 respectively. Here is some (also made-up) data from five participants, stored in a tibble named dat. subj_id wash_legs wash_ears wash_toes shampoo S01 Sometimes Never Never Frequently S02 Sometimes Frequently Frequently Always S03 Never Never Never Frequently S04 Always Always Sometimes Always S05 Frequently Sometimes Never Sometimes (If you want to make dat so you can follow along with the example by running the code in R, click the button below.) show me the R code to create the table ‚Äòdat‚Äô library(&quot;tidyverse&quot;) dat &lt;- tribble( ~subj_id, ~wash_legs, ~wash_ears, ~wash_toes, ~shampoo, &quot;S01&quot;, &quot;Sometimes&quot;, &quot;Never&quot;, &quot;Never&quot;, &quot;Frequently&quot;, &quot;S02&quot;, &quot;Sometimes&quot;, &quot;Frequently&quot;, &quot;Frequently&quot;, &quot;Always&quot;, &quot;S03&quot;, &quot;Never&quot;, &quot;Never&quot;, &quot;Never&quot;, &quot;Frequently&quot;, &quot;S04&quot;, &quot;Always&quot;, &quot;Always&quot;, &quot;Sometimes&quot;, &quot;Always&quot;, &quot;S05&quot;, &quot;Frequently&quot;, &quot;Sometimes&quot;, &quot;Never&quot;, &quot;Sometimes&quot;) This data is in wide format: there is a single row for each participant with data for each question forming the columns. What we are going to do first is to convert this data from wide to long using pivot_longer(). (You‚Äôll see why in a minute.) dat_long &lt;- dat %&gt;% pivot_longer(cols = wash_legs:shampoo, names_to = &quot;question&quot;, values_to = &quot;response&quot;) Take a look at dat_long. subj_id question response S01 wash_legs Sometimes S01 wash_ears Never S01 wash_toes Never S01 shampoo Frequently S02 wash_legs Sometimes S02 wash_ears Frequently S02 wash_toes Frequently S02 shampoo Always S03 wash_legs Never S03 wash_ears Never S03 wash_toes Never S03 shampoo Frequently S04 wash_legs Always S04 wash_ears Always S04 wash_toes Sometimes S04 shampoo Always S05 wash_legs Frequently S05 wash_ears Sometimes S05 wash_toes Never S05 shampoo Sometimes Now we only have one variable we need to convert to numeric values (response) instead of the original four. There is an easy solution: we create a ‚Äúlookup table‚Äù mapping the string values to the numeric values like so. But first let‚Äôs check what the unique string values are in the data. Our lookup table must match these exactly or the approach won‚Äôt work. dat_long %&gt;% distinct(response) %&gt;% pull() ## [1] &quot;Sometimes&quot; &quot;Never&quot; &quot;Frequently&quot; &quot;Always&quot; This step is important because sometimes these fields can have special characters that you don‚Äôt normally when you print out a table. The distinct() %&gt;% pull() pattern will give you those values in a way that makes them visible. For instance, a student once had values in the data like this: [1] &quot;Somewhat\\nInfrequently&quot; &quot;Somewhat\\nFrequently&quot; &quot;Very\\nInfrequently&quot; [4] &quot;Almost\\nNever&quot; &quot;Very\\nFrequently&quot; &quot;Almost\\nAlways&quot; and the lookup table was constantly failing because the lookup table they created did not have the \\n in the middle of each string. Computers are very literal! OK now we‚Äôre ready to create our lookup table where we match these four values to numbers. lookup &lt;- tribble( ~response, ~score, &quot;Never&quot;, 0, &quot;Sometimes&quot;, 1, &quot;Frequently&quot;, 2, &quot;always&quot;, 3) As the final step, we inner_join() the original table dat_long to lookup on the variable response. joined &lt;- inner_join(dat_long, lookup, by = &quot;response&quot;) IMPORTANT: You should check to make sure that the join worked as intended. The values in the lookup table must exactly match the values in the response column of dat_long. It is easy to make a typo in the lookup table, and those values will be lost. An easy test is to make sure that the number of rows in joined matches the number of rows in dat_long. stopifnot(nrow(joined) == nrow(dat_long)) The function stopifnot() will make our script fail if the stated condition (that both tables have the same number of rows) is not satisfied. Uh oh. Running it gives Error: nrow(joined) == nrow(dat_long) is not TRUE. The test failed, because I deliberately included a typo in the lookup table. Can you see it? what is it? always should be Always. Capitalization matters! So let‚Äôs fix our lookup table and then we should be good to go. Here is the full code for this demonstration: dat_long &lt;- dat %&gt;% pivot_longer(cols = wash_legs:shampoo, names_to = &quot;question&quot;, values_to = &quot;response&quot;) ## check for hidden values dat_long %&gt;% distinct(response) %&gt;% pull() lookup &lt;- tribble( ~response, ~score, &quot;Never&quot;, 0, &quot;Sometimes&quot;, 1, &quot;Frequently&quot;, 2, &quot;Always&quot;, 3) joined &lt;- inner_join(dat_long, lookup, by = &quot;response&quot;) ## test whether the number of rows match stopifnot(nrow(joined) == nrow(dat_long)) You could then use joined %&gt;% group_by(subj_id) %&gt;% summarise(hygiene = sum(score)) to calculate a score for each subject. August 18, 2021. -DB 4.2 How do I reverse score a subset of items on my questionnaire? We will be working with a made-up scale with six items which measures how much respondents appreciate dogs. People respond to each of the six items on a 5 point likert scale, where 1=strongly disagree, 2=somewhat disagree, 3=neutral, 4=somewhat agree, 5=strongly agree. Table 4.1: The Dog Appreciation Scale item reverse_score I like dogs FALSE Dogs are fun FALSE Cats are better than dogs TRUE Dogs are helpful FALSE Dogs are too noisy TRUE Dogs are too much responsibility TRUE Here is some made-up questionnaire data with 6 items and 3 subjects, contained in the tibble named das. We want to reverse score the items ‚ÄúCats are better than dogs‚Äù, ‚ÄúDogs are too noisy‚Äù, and ‚ÄúDogs are too much responsibility‚Äù before summing up the total for each subject. ## # A tibble: 18 x 3 ## subj_id item score ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 S01 I like dogs 5 ## 2 S01 Dogs are fun 5 ## 3 S01 Cats are better than dogs 1 ## 4 S01 Dogs are helpful 4 ## 5 S01 Dogs are too noisy 2 ## 6 S01 Dogs are too much responsibility 2 ## 7 S02 I like dogs 3 ## 8 S02 Dogs are fun 4 ## 9 S02 Cats are better than dogs 2 ## 10 S02 Dogs are helpful 4 ## 11 S02 Dogs are too noisy 3 ## 12 S02 Dogs are too much responsibility 5 ## 13 S03 I like dogs 1 ## 14 S03 Dogs are fun 3 ## 15 S03 Cats are better than dogs 5 ## 16 S03 Dogs are helpful 2 ## 17 S03 Dogs are too noisy 4 ## 18 S03 Dogs are too much responsibility 5 show me the code to create the table ‚Äòdas‚Äô library(&quot;tidyverse&quot;) das &lt;- tribble( ~subj_id, ~item, ~score, &quot;S01&quot;, &quot;I like dogs&quot;, 5, &quot;S01&quot;, &quot;Dogs are fun&quot;, 5, &quot;S01&quot;, &quot;Cats are better than dogs&quot;, 1, &quot;S01&quot;, &quot;Dogs are helpful&quot;, 4, &quot;S01&quot;, &quot;Dogs are too noisy&quot;, 2, &quot;S01&quot;, &quot;Dogs are too much responsibility&quot;, 2, &quot;S02&quot;, &quot;I like dogs&quot;, 3, &quot;S02&quot;, &quot;Dogs are fun&quot;, 4, &quot;S02&quot;, &quot;Cats are better than dogs&quot;, 2, &quot;S02&quot;, &quot;Dogs are helpful&quot;, 4, &quot;S02&quot;, &quot;Dogs are too noisy&quot;, 3, &quot;S02&quot;, &quot;Dogs are too much responsibility&quot;, 5, &quot;S03&quot;, &quot;I like dogs&quot;, 1, &quot;S03&quot;, &quot;Dogs are fun&quot;, 3, &quot;S03&quot;, &quot;Cats are better than dogs&quot;, 5, &quot;S03&quot;, &quot;Dogs are helpful&quot;, 2, &quot;S03&quot;, &quot;Dogs are too noisy&quot;, 4, &quot;S03&quot;, &quot;Dogs are too much responsibility&quot;, 5) First, we assume that you have your data in long format, like the table above. If you don‚Äôt, then please see the materials on reshaping from wide to long, such as this section from the MSC book. We are going to use a programming trick that we‚Äôll call ‚Äúthe N-plus-one-minus-X trick‚Äù to score the items that need to be reverse coded. This trick will work whenever you have a scale with N scale points that goes in integer steps from 1 to N (e.g., 1, 2, 3, 4, 5). You subtract Xs (each observed score) from N+1 to get the reversed value. newscore = (number_of_scale_points + 1) - oldscore So if you have a 5 point scale, it is: newscore = 6 - oldscore and a 7 point scale is newscore = 8 - oldscore. You can see this works using the following code: oldscores &lt;- 1:5 newscores &lt;- 6 - oldscores rbind(oldscores, newscores) ## [,1] [,2] [,3] [,4] [,5] ## oldscores 1 2 3 4 5 ## newscores 5 4 3 2 1 Note: If your scale goes from 0 to N, then use N - X rather than (N + 1) - X to reverse score. So we can see already that we need something like: das %&gt;% mutate(newscore = 6 - score) but only for those items that need to be reverse scored. This is where if_else() comes in. Or, better said, where if_else() comes %in% (if you can pardon a bit of R humor). das_coded &lt;- das %&gt;% mutate(newscore = if_else(item %in% c(&quot;Cats are better than dogs&quot;, &quot;Dogs are too noisy&quot;, &quot;Dogs are too much responsibilitiy&quot;), 6 - score, score)) The code above adds a new variable newscore which is the result of the if_else() command and stores the resulting table in das_coded. This command has the following syntax: if_else(condition, value_if_true, value_if_false). So, if the current value of item is found within the vector of options (that‚Äôs what the %in% operator does), the first expression evaluates to TRUE, and 6-score is returned; if the first expression evaluates to FALSE, then score is returned. But whenever you recode or score a variable, you should ALWAYS check that your code is correct, because typos are likely. The best way to do this is to run a little test in the console. You can just print out the data from das_coded, or if you have a lot of data, use distinct() to look at check the distinct values observed in the data. das_coded %&gt;% distinct(item, score, newscore) %&gt;% print(n = +Inf) ## this makes sure *all* rows are printed, not just the first 20 ## # A tibble: 16 x 3 ## item score newscore ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 I like dogs 5 5 ## 2 Dogs are fun 5 5 ## 3 Cats are better than dogs 1 5 ## 4 Dogs are helpful 4 4 ## 5 Dogs are too noisy 2 4 ## 6 Dogs are too much responsibility 2 2 ## 7 I like dogs 3 3 ## 8 Dogs are fun 4 4 ## 9 Cats are better than dogs 2 4 ## 10 Dogs are too noisy 3 3 ## 11 Dogs are too much responsibility 5 5 ## 12 I like dogs 1 1 ## 13 Dogs are fun 3 3 ## 14 Cats are better than dogs 5 1 ## 15 Dogs are helpful 2 2 ## 16 Dogs are too noisy 4 2 Here we can see that ‚ÄúCats are better than dogs‚Äù and ‚ÄúDogs are too noisy‚Äù have been successfully reverse scored. We can also see that the items that should be forward scored, e.g., ‚ÄúI like dogs‚Äù, are indeed forward scored (the scores don‚Äôt change). But our reverse scoring of ‚ÄúDogs are too much responsibility‚Äù has failed. Can you see the problem in our code (hint: typo). no, I can‚Äôt see the problem responsibility is mistyped as responsibilitiy So the correct code is: das_coded &lt;- das %&gt;% mutate(newscore = if_else(item %in% c(&quot;Cats are better than dogs&quot;, &quot;Dogs are too noisy&quot;, &quot;Dogs are too much responsibility&quot;), 6 - score, score)) das_coded %&gt;% distinct(item, score, newscore) %&gt;% print(n = +Inf) ## this makes sure *all* rows are printed, not just the first 20 ## # A tibble: 16 x 3 ## item score newscore ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 I like dogs 5 5 ## 2 Dogs are fun 5 5 ## 3 Cats are better than dogs 1 5 ## 4 Dogs are helpful 4 4 ## 5 Dogs are too noisy 2 4 ## 6 Dogs are too much responsibility 2 4 ## 7 I like dogs 3 3 ## 8 Dogs are fun 4 4 ## 9 Cats are better than dogs 2 4 ## 10 Dogs are too noisy 3 3 ## 11 Dogs are too much responsibility 5 1 ## 12 I like dogs 1 1 ## 13 Dogs are fun 3 3 ## 14 Cats are better than dogs 5 1 ## 15 Dogs are helpful 2 2 ## 16 Dogs are too noisy 4 2 We‚Äôve done it! Now we can proceed to analyze our data further. January 2021. -DB "],["microsoft-teams.html", "Topic 5 Microsoft Teams 5.1 Pinning channels 5.2 What is the best way to share R code on Microsoft Teams?", " Topic 5 Microsoft Teams 5.1 Pinning channels Teams have a way of building up a huge glut of channels, and it can get annoying to have to navigate through them every time just to find the few that you are most interested in. You may even belong to multiple teams. Here‚Äôs a good solution for reducing clutter: pin the channels you are most interested in. They will appear at the top of your screen when you open Teams. image of Dale‚Äôs pinned teams It‚Äôs easy enough to do. Navigate to the channel you‚Äôre interested in. Click on the three dots appearing at the right, and from the pop-up menu, select Pin. That‚Äôs it! image of pop-up menu next to channel 5.2 What is the best way to share R code on Microsoft Teams? You have run into a problem and need to get help on MS Teams. What is the right way to share your code? Please do NOT share a screenshot to the teams channel unless you are asked, or if it is not the code that is giving you problems, but something weird is happening with the RStudio IDE. If it‚Äôs your code that is not working, it is almost always better to copy and paste the code, because then people who are trying to help you can copy and paste the code exactly to try it out, rather than having to re-type everything from the image. Let‚Äôs look at an example. Below is a screenshot of how the RStudio IDE might look when your code throws an error. Here the code block labelled cars is causing the error. I will talk you through how to post the code on Teams. You might want to play around with these options in your Team‚Äôs ‚ÄúTest‚Äù channel before posting. a screenshot of RStudio IDE showing an error indicated by the red arrow The particular error that our code threw was Error in mtcars %&gt;% filter(mpg &gt; 20) : could not find function &quot;%&gt;%&quot; And the code that threw it was mtcars %&gt;% filter(mpg &gt; 20) Note that you can select and copy the code above if you wanted to run it yourself, but you could not do that if all you had to rely on was the screenshot. Copying the code and/or error in RStudio is easy; just highlight the code using the mouse and press Ctrl-C. If you just paste the code into a teams channel, the formatting is not so nice; you lose the formatting that allows you to read the code easily. A screenshot of MS Teams with the code pasted directly in. Not pretty! Here are two ways to get your code into teams, one that is quick and easy but not very flexible, and another that is far more flexible but requires more steps. 5.2.1 Quick and easy method First, if it is just a short function call, a single line, or an error, you can signal that text is meant to appear as code by surrounding it by single backticks‚Äîi.e., putting a backtick (`) right before and right after the text that you want to be formatted as code. Teams will automatically format it for you. For multi-line code, the easiest and fastest way is just to type three backticks inside your message at the beginning of a line. Any subsequent text you enter will be treated as code. To get to the beginning of a line without submitting your post, press Ctrl-Enter while typing your message. Then type the three backticks, and paste your code right into the gray box that automatically appears. Press Enter twice in a row to get back out of the code entry box. So your message might look like this. A screenshot of MS Teams with code embedded in a chunk. Above, I surrounded the error message Error in mtcars %&gt;% filter(mpg &gt; 20) : could not find function \"%&gt;%\" with single backticks to indicate code, and we typed triple backticks at the start of the line to create a code chunk. (The next method might be easier for making multi-line posts.) 5.2.2 More flexible method There is a more flexible (and possibly easier) way. Before pasting any text, click on the icon that looks like the letter ‚ÄúA‚Äù, highlighted below. Screenshot of Teams showing the icon that looks like an ‚ÄúA‚Äù This will open up options for text formatting and will allow you to easily create a multi-line poste. From those options, select the icon that looks like &lt;/&gt; which stands for code. Screenshot of Teams formatting icons, with code icon highlighted The code icon will open a window where you can paste your code. In the dropdown menu on the top right, select ‚ÄòR‚Äô as the type of code. This will give you syntax highlighting. Screenshot of Teams formatting icons, with code icon highlighted Here is how you might begin your post. Screenshot of Teams with unsubmitted post 5.2.2.1 Taking it one step further! If you really want to make things pretty and impress your instructors, please consider creating a reproducible example using the reprex package from tidyverse. -September 24, 2020, -DB "],["using-zoom.html", "Topic 6 Using Zoom 6.1 How do I set up Zoom for my classes? 6.2 How do I update Zoom? 6.3 How do I sign in with my Zoom email address?", " Topic 6 Using Zoom 6.1 How do I set up Zoom for my classes? To have a smooth experience on Zoom, you must do three things. You must have the most recent Zoom version. Before joining your first session, please update Zoom. Use Zoom on your laptop or PC during the lab. Breakout rooms work much better on your laptop/PC than on a phone or tablet. Use your UofG email address to sign in to Zoom. This is VERY important if your lab/class is using breakout rooms. 6.2 How do I update Zoom? Open Zoom on your desktop Click on your profile pic on the top right corner Go on ‚ÄòCheck for Updates‚Äô Install the most recent version Restart your computer 6.3 How do I sign in with my Zoom email address? Your UofG email address starts with your Student ID, followed by the first letter of your last name, followed by ‚Äò@‚Äô and then ‚Äòstudent.gla.ac.uk‚Äô (e.g., ). When you click on your profile pic on the top right corner, it shows you the email address you have signed in with. This must be your student.gla.ac.uk email address. If you‚Äôre not signed in with the right email address, sign out and sign in again. You can ‚ÄúSign in using SSO‚Äù and at the prompt where it asks you _____.zoom.us enter ‚Äúuofglasgow‚Äù. This will take you to the sign-in page where you enter your GUID and password. -October 1, 2020, -CKT and DB "]]
