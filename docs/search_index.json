[
["index.html", "Frequently Asked Questions about R/RStudio Overview", " Frequently Asked Questions about R/RStudio Team #PsyTeachR 2020-10-01 Overview This book contains answers to many Frequently Asked Questions received by the #PsyTeachR team. "],
["installing-r-and-rstudio.html", "Topic 1 Installing R and RStudio 1.1 How do I install the R build tools? 1.2 I’m getting an error when I try to start up RStudio. 1.3 I am using MacOS 10.15 Catalina", " Topic 1 Installing R and RStudio 1.1 How do I install the R build tools? If you are not able to install packages from source, you are missing the build tools that are used to compile source code into files that the operating system can execute. If you are a Windows user Go to https://cran.r-project.org/bin/windows/Rtools. Download and install the “recommended” version. October 24, 2019. -DB 1.2 I’m getting an error when I try to start up RStudio. 1.2.1 I am on a campus computer, and the error is: “Fatal error: unable to initialize the JIT” This is due to a bug in your campus profile. Please speak to the IT Helpdesk. November 6, 2019. -DB 1.3 I am using MacOS 10.15 Catalina When you first open RStudio, you might get a warning that says: The “git” command requires the command line developer tools. Would you like to install the tools now? Click Install just in case Apple sorts out their probelm so you get the most up to date version. But you’re likely to get this error message: Can’t install the software because it is not currently available from the Software Update server. Go to Apple Developer. You might need to sign in with your Apple ID. Choose Command Line Tools for Xcode 12 (not the beta) at https://developer.apple.com/download/more/. You don’t need to install Xcode 12. Download the DMG, open it, and follow the instructions to install it. You will need your computer password. More Downloads for Apple Developers - install Command Line Tools for Xcode 12 After you install the command line tools, you can delete the disk image (.dmg file). Quit RStudio if it is open and reopen it. You might be asked to install new packages, such as xfun. Just click Yes to install them. If you are not asked to install packages when you open RStudio, or after you do install them, try to open a new R Markdown file. This will probably prompt more installations. Install Required Packages There will be a lot of red output in the RStudio console, but this is normal. Installing Packages After this, try to make a new R Markdown file and knit the demo file to html. You should be all set now. Thanks to Ashley McCluskey for figuring out where to get the command tools! 2020 October 1 -LDB "],
["working-with-r-and-rstudio.html", "Topic 2 Working with R and RStudio 2.1 What is the best way to share code on Microsoft Teams?", " Topic 2 Working with R and RStudio 2.1 What is the best way to share code on Microsoft Teams? You have run into a problem and need to get help on MS Teams. What is the right way to share your code? Please do NOT share a screenshot to the teams channel unless you are asked, or if it is not the code that is giving you problems, but something weird is happening with the RStudio IDE. If it’s your code that is not working, it is almost always better to copy and paste the code, because then people who are trying to help you can copy and paste the code exactly to try it out, rather than having to re-type everything from the image. Let’s look at an example. Below is a screenshot of how the RStudio IDE might look when your code throws an error. Here the code block labelled cars is causing the error. I will talk you through how to post the code on Teams. You might want to play around with these options in your Team’s “Test” channel before posting. a screenshot of RStudio IDE showing an error indicated by the red arrow The particular error that our code threw was Error in mtcars %&gt;% filter(mpg &gt; 20) : could not find function &quot;%&gt;%&quot; And the code that threw it was mtcars %&gt;% filter(mpg &gt; 20) Note that you can select and copy the code above if you wanted to run it yourself, but you could not do that if all you had to rely on was the screenshot. Copying the code and/or error in RStudio is easy; just highlight the code using the mouse and press Ctrl-C. If you just paste the code into a teams channel, the formatting is not so nice; you lose the formatting that allows you to read the code easily. A screenshot of MS Teams with the code pasted directly in. Not pretty! Here are two ways to get your code into teams, one that is quick and easy but not very flexible, and another that is far more flexible but requires more steps. 2.1.1 Quick and easy method First, if it is just a short function call, a single line, or an error, you can signal that text is meant to appear as code by surrounding it by single backticks—i.e., putting a backtick (`) right before and right after the text that you want to be formatted as code. Teams will automatically format it for you. For multi-line code, the easiest and fastest way is just to type three backticks inside your message at the beginning of a line. Any subsequent text you enter will be treated as code. To get to the beginning of a line without submitting your post, press Ctrl-Enter while typing your message. Then type the three backticks, and paste your code right into the gray box that automatically appears. Press Enter twice in a row to get back out of the code entry box. So your message might look like this. A screenshot of MS Teams with code embedded in a chunk. Above, I surrounded the error message Error in mtcars %&gt;% filter(mpg &gt; 20) : could not find function \"%&gt;%\" with single backticks to indicate code, and we typed triple backticks at the start of the line to create a code chunk. (The next method might be easier for making multi-line posts.) 2.1.2 More flexible method There is a more flexible (and possibly easier) way. Before pasting any text, click on the icon that looks like the letter “A”, highlighted below. Screenshot of Teams showing the icon that looks like an “A” This will open up options for text formatting and will allow you to easily create a multi-line poste. From those options, select the icon that looks like &lt;/&gt; which stands for code. Screenshot of Teams formatting icons, with code icon highlighted The code icon will open a window where you can paste your code. In the dropdown menu on the top right, select ‘R’ as the type of code. This will give you syntax highlighting. Screenshot of Teams formatting icons, with code icon highlighted Here is how you might begin your post. Screenshot of Teams with unsubmitted post -September 24, 2020, -DB "],
["add-on-packages.html", "Topic 3 Add-On Packages 3.1 Why can’t I compile packages from source? 3.2 When I try to compile, I get the following error message:", " Topic 3 Add-On Packages 3.1 Why can’t I compile packages from source? If you are a Windows user, you are missing RTools. See this FAQ If you are a Mac user, there might be something wrong with your installation. October 24, 2019. -DB 3.2 When I try to compile, I get the following error message: xcrun: error: invalid active developer path Solution: Open up the Terminal App. (Application&gt;Utilities or you can use the Terminal tab in RStudio, next to the console). At the command line in the Terminal type the following line. xcode-select --install October 24, 2019. -DB "],
["knitting-and-rmarkdown-files.html", "Topic 4 Knitting and RMarkdown Files 4.1 Every time I knit, I get a message that packages are missing, and it won’t knit. 4.2 How do I get nicely formatted R code into a Word document?", " Topic 4 Knitting and RMarkdown Files 4.1 Every time I knit, I get a message that packages are missing, and it won’t knit. Probably what’s happening is that it tries but fails to install the necessary packages. Mark down the names of the packages that it says you need and try to install them from the command line. For example, if it says you need digest then type this into the console: install.packages(&quot;digest&quot;) and see what happens. Note any error messages. Check the section on packages for help with specific error messages. October 24, 2019. -DB 4.2 How do I get nicely formatted R code into a Word document? You might want to include your R code as an appendix in a document. If you just cut and paste it in, the formatting will look terrible. So here is a trick that allows you to get nicely formatted R code into Word. First step: open a new R Markdown file which you will paste the code into. For the output format, select Word. Second step: paste the code into a block with chunk options eval=FALSE, echo=TRUE. ```{r verb, eval = FALSE, echo=TRUE} ## this is my code library(&quot;tidyverse&quot;) dat &lt;- read_csv(&quot;blah.csv&quot;) %&gt;% group_by(subj_id) %&gt;% summarise(m = mean(RT)) ``` Third step: compile to Word. You can now copy and paste the formatted code into your document. March 23, 2020 -DB "],
["data-wrangling.html", "Topic 5 Data Wrangling 5.1 Importing data from multiple files 5.2 Detecting “runs” in a sequence", " Topic 5 Data Wrangling 5.1 Importing data from multiple files The following code allows you to read in a whole bunch of files from a directory datadir all at once into a big table. If the files are in the same directory as your script, replace datadir with a full stop, i.e., dir(\".\", \"\\\\.[Cc][Ss][Vv]$\"). library(&quot;tidyverse&quot;) # &quot;\\\\.csv$&quot; = find all files ending with csv or CSV todo &lt;- tibble(filename = dir(&quot;datadir&quot;, &quot;\\\\.[Cc][Ss][Vv]$&quot;)) all_data &lt;- todo %&gt;% mutate(imported = map(filename, read_csv)) %&gt;% unnest(imported) If there is preprocessing you need to do on each file before reading it in, you can write your own function and call that in place of read_csv(). October 30, 2019. -DB 5.2 Detecting “runs” in a sequence Let’s say you have a table like below, and you want to find the start and end frames where you have a run of Z amidst a, b, c, d. Here is code that sets up this kind of situation. Don’t worry if you don’t understand this code; just run it to create the example data in runsdata, and have a look at that table. library(&quot;knitr&quot;) create_run_vec &lt;- function() { ## create a random string of letters with two runs c(rep(sample(letters[1:4]), sample(2:4, 4, TRUE)), rep(&quot;Z&quot;, 3), rep(sample(letters[1:4]), sample(2:4, 4, TRUE)), rep(&quot;Z&quot;, 3), rep(sample(letters[1:4], 2), sample(2:4, 2, TRUE))) } ## 5 subjects, 3 trials each runsdata &lt;- tibble( subject = rep(1:5, each = 3), trial = rep(1:3, 5), stimulus = rerun(15, create_run_vec())) %&gt;% unnest(stimulus) %&gt;% group_by(subject, trial) %&gt;% ungroup() %&gt;% select(subject, trial, stimulus) Let’s say you want to find the start and stop frames where Z appears in stimulus, and do this independently for each combination of subject and trial. Here’s how stimulus looks for subject 1 and trial 1. ## [1] &quot;b&quot; &quot;b&quot; &quot;a&quot; &quot;a&quot; &quot;a&quot; &quot;c&quot; &quot;c&quot; &quot;c&quot; &quot;c&quot; &quot;d&quot; &quot;d&quot; &quot;d&quot; &quot;d&quot; &quot;Z&quot; &quot;Z&quot; &quot;Z&quot; &quot;c&quot; &quot;c&quot; &quot;c&quot; ## [20] &quot;a&quot; &quot;a&quot; &quot;a&quot; &quot;d&quot; &quot;d&quot; &quot;d&quot; &quot;d&quot; &quot;b&quot; &quot;b&quot; &quot;b&quot; &quot;Z&quot; &quot;Z&quot; &quot;Z&quot; &quot;d&quot; &quot;d&quot; &quot;d&quot; &quot;d&quot; &quot;b&quot; &quot;b&quot; So here you can see that the first run of Zs is from frame 14 to 16, 32 and the second is from 30 to 32. We want to write a function that processes the data for each trial and results in a table like this: ## # A tibble: 2 x 5 ## subject trial run start_frame end_frame ## &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1 1 1 14 16 ## 2 1 1 2 30 32 The first thing to do is to add a logical vector to your tibble whose value is TRUE when the target value (e.g., Z) is present in the sequence, false otherwise. runsdata_tgt &lt;- runsdata %&gt;% mutate(is_target = (stimulus == &quot;Z&quot;)) runsdata_tgt ## # A tibble: 548 x 4 ## subject trial stimulus is_target ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;lgl&gt; ## 1 1 1 b FALSE ## 2 1 1 b FALSE ## 3 1 1 a FALSE ## 4 1 1 a FALSE ## 5 1 1 a FALSE ## 6 1 1 c FALSE ## 7 1 1 c FALSE ## 8 1 1 c FALSE ## 9 1 1 c FALSE ## 10 1 1 d FALSE ## # … with 538 more rows We want to iterate over subjects and trials. We’ll start by creating a tibble with columns is_target nested into a column called subtbl. runs_nest &lt;- runsdata_tgt %&gt;% select(-stimulus) %&gt;% # don&#39;t need it anymore nest(subtbl = c(is_target)) We want to iterate over the little subtables stored within subtbl in each row of the table, passing the table to a function that will find the runs and return another table, which we’ll store in new column. Let’s write a function to detect the runs. That function will need the function rle() (Run-Length Encoding) from base R. We’ll run that on the logical vector we created (is_target). Before creating the function, let’s see what rle() does on the values in is_target for subject 1, trial 1. s1t1 &lt;- runsdata_tgt %&gt;% filter(subject == 1L, trial == 1L) %&gt;% pull(is_target) s1t1 rle(s1t1) ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [13] FALSE TRUE TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [25] FALSE FALSE FALSE FALSE FALSE TRUE TRUE TRUE FALSE FALSE FALSE FALSE ## [37] FALSE FALSE ## Run Length Encoding ## lengths: int [1:5] 13 3 13 3 6 ## values : logi [1:5] FALSE TRUE FALSE TRUE FALSE If that doesn’t make sense, look at the help for rle() (type ?rle in the console). Now we’re ready to write our function, detect_runs(). detect_runs &lt;- function(x) { if (!is.logical(x[[1]])) stop(&quot;&#39;x&#39; must be a tibble whose first column is of type &#39;logical&#39;&quot;) runs &lt;- rle(x[[1]]) run_start_fr &lt;- c(1L, cumsum(runs$lengths[-length(runs$lengths)]) + 1L) run_end_fr &lt;- run_start_fr + (runs$lengths - 1L) tgt_start &lt;- run_start_fr[runs$values] tgt_end &lt;- run_end_fr[runs$value] tibble(run = seq_along(tgt_start), start_fr = tgt_start, end_fr = tgt_end) } We can test the function on s1t1 just to make sure it works. detect_runs(tibble(lvec = s1t1)) ## # A tibble: 2 x 3 ## run start_fr end_fr ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1 14 16 ## 2 2 30 32 OK, now we’re ready to run the function. result &lt;- runs_nest %&gt;% mutate(runstbl = map(subtbl, detect_runs)) result ## # A tibble: 15 x 4 ## subject trial subtbl runstbl ## &lt;int&gt; &lt;int&gt; &lt;list&gt; &lt;list&gt; ## 1 1 1 &lt;tibble [38 × 1]&gt; &lt;tibble [2 × 3]&gt; ## 2 1 2 &lt;tibble [37 × 1]&gt; &lt;tibble [2 × 3]&gt; ## 3 1 3 &lt;tibble [39 × 1]&gt; &lt;tibble [2 × 3]&gt; ## 4 2 1 &lt;tibble [36 × 1]&gt; &lt;tibble [2 × 3]&gt; ## 5 2 2 &lt;tibble [41 × 1]&gt; &lt;tibble [2 × 3]&gt; ## 6 2 3 &lt;tibble [37 × 1]&gt; &lt;tibble [2 × 3]&gt; ## 7 3 1 &lt;tibble [36 × 1]&gt; &lt;tibble [2 × 3]&gt; ## 8 3 2 &lt;tibble [34 × 1]&gt; &lt;tibble [2 × 3]&gt; ## 9 3 3 &lt;tibble [32 × 1]&gt; &lt;tibble [2 × 3]&gt; ## 10 4 1 &lt;tibble [33 × 1]&gt; &lt;tibble [2 × 3]&gt; ## 11 4 2 &lt;tibble [40 × 1]&gt; &lt;tibble [2 × 3]&gt; ## 12 4 3 &lt;tibble [37 × 1]&gt; &lt;tibble [2 × 3]&gt; ## 13 5 1 &lt;tibble [37 × 1]&gt; &lt;tibble [2 × 3]&gt; ## 14 5 2 &lt;tibble [32 × 1]&gt; &lt;tibble [2 × 3]&gt; ## 15 5 3 &lt;tibble [39 × 1]&gt; &lt;tibble [2 × 3]&gt; Now we just have to unnest and we’re done! result %&gt;% select(-subtbl) %&gt;% unnest(runstbl) ## # A tibble: 30 x 5 ## subject trial run start_fr end_fr ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1 1 1 14 16 ## 2 1 1 2 30 32 ## 3 1 2 1 15 17 ## 4 1 2 2 30 32 ## 5 1 3 1 14 16 ## 6 1 3 2 29 31 ## 7 2 1 1 14 16 ## 8 2 1 2 29 31 ## 9 2 2 1 15 17 ## 10 2 2 2 31 33 ## # … with 20 more rows October 30, 2019. -DB "],
["plotting.html", "Topic 6 Plotting 6.1 Highlighting a range of x-values on a plot", " Topic 6 Plotting 6.1 Highlighting a range of x-values on a plot Sometimes you want to highlight a particular range of values; for example, a particular period of time in a time series. The code below is used to create the following plot. Figure 6.1: A time series with x = 40-60 highlighted library(&quot;tidyverse&quot;) ## make up some example data exdata &lt;- tibble(x = rep(1:100, 2), series = rep(1:2, each = 100), y = rnorm(200) + rep(c(30, 50), each = 100)) ## region we want to highlight regions &lt;- tibble(x1 = 40, x2 = 60, y1 = -Inf, y2 = +Inf) ggplot(exdata, aes(x, y)) + geom_rect(data = regions, inherit.aes = FALSE, mapping = aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2), color = &quot;transparent&quot;, fill = &quot;blue&quot;, alpha = .2) + geom_line(aes(group = series)) March 23, 2020. -DB "]
]
